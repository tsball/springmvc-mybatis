<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"  
	xmlns:mvc="http://www.springframework.org/schema/mvc"  
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-3.2.xsd
    http://www.springframework.org/schema/aop  
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.jasypt.org/schema/encryption
	http://www.jasypt.org/schema/encryption/jasypt-spring3-encryption-1.xsd">
  	
	<!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/template/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- spring json -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />  
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" >  
	    <property name="messageConverters">  
	        <util:list id="beanList">  
	            <ref bean="jacksonMessageConverter"/>  
	            <ref bean="stringHttpMessageConverter"/>
	        </util:list>
	    </property>
	</bean>
	
	<!--确保@@ResponseBody 返回字符串是，格式是 text/plain;charset=UTF-8;
	                            因为默认的是ISO-8859-1;-->
	<bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
		<constructor-arg value="UTF-8" />
	    <property name="supportedMediaTypes">
	        <list>
	            <value>text/plain;charset=UTF-8</value>
	            <value>text/html;charset=UTF-8</value>
	        </list>
	    </property>
	</bean>
	
	<!-- 启动JSON格式的配置 -->
	<bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<!-- 解决 HttpMediaTypeNotAcceptableException: Could not find acceptable representation -->
		<property name="supportedMediaTypes">
			<list>
	        	<value>text/json;charset=UTF-8</value>
	        	<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	
	<!-- spring intercept -->
	<mvc:interceptors>
		<mvc:interceptor>    
        	<mvc:mapping path="/admin/**" />
        	<bean class="com.springmvc.interceptor.UserAwareInterceptor" >
				<property name="timeoutViewName">
			    	<value>login/timeout</value>
			    </property>
			</bean>
       </mvc:interceptor>  
	</mvc:interceptors>
	
	<bean id="jdbcTemplate" class="com.springmvc.jdbc.CustomJdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>
	
    <!--xiayue后台数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"       
            destroy-method="close">          
        <!-- 基本属性 url、user、password -->
		<property name="url" value="${mysql.datasource.url}" />
		<property name="username" value="${mysql.datasource.username}" />
		<property name="password" value="${mysql.datasource.password}" />
		<property name="driverClassName" value="${mysql.datasource.driverClassName}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${mysql.druid.initialSize}" />
		<property name="minIdle" value="${mysql.druid.minIdle}" />
		<property name="maxActive" value="${mysql.druid.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${mysql.druid.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${mysql.druid.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${mysql.druid.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${mysql.druid.validationQuery}" />
		<property name="testWhileIdle" value="${mysql.druid.testWhileIdle}" />
		<property name="testOnBorrow" value="${mysql.druid.testOnBorrow}" />
		<property name="testOnReturn" value="${mysql.druid.testOnReturn}" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 ，mysql则可以设置为false-->
		<property name="poolPreparedStatements" value="${mysql.druid.poolPreparedStatements}" />
    </bean>
	
	<!-- 添加事务支持@Transactional -->
	<bean id="txManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
    
    <!-- 使用注解的方式,在方法前加@Transactional -->
    <!-- <tx:annotation-driven transaction-manager="txManager" /> -->
    <!-- 使用配置的方式，约定好一定规则后匹配 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">  
	    <tx:attributes>
	    	<!-- <tx:method name="*" rollback-for="***Exception"/> -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<!-- <tx:method name="get*" propagation="SUPPORTS" read-only="true" /> -->  
			<!-- <tx:method name="count*" propagation="SUPPORTS" read-only="true" /> -->  
			<tx:method name="*" propagation="SUPPORTS" read-only="true" />  
       </tx:attributes>
	</tx:advice>
	
	<aop:config>  
       <aop:pointcut id="txPointcut" expression="execution(* com.springmvc.service.*.*(..))" />  
       <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />  
	</aop:config>
	
	<!-- 异常处理 -->
	<bean id="exceptionResolver" class="com.springmvc.resolver.ControllerHandlerExceptionResolver">
		<property name="viewExceptionKey" value="exception" />
		<property name="dwzErrorViewName" value="dwz_exception" />
	</bean> 
	
	 <!-- captcha -->
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg>
					<props>
						<prop key="kaptcha.border">yes</prop>
						<prop key="kaptcha.border.color">201,204,209</prop>
						<prop key="kaptcha.textproducer.font.color">29,94,148</prop>
						<prop key="kaptcha.textproducer.char.string">123456789</prop>
						<prop key="kaptcha.image.width">133</prop>
						<prop key="kaptcha.image.height">55</prop>
						<prop key="kaptcha.textproducer.font.size">35</prop>
						<prop key="kaptcha.session.key">code</prop>
						<prop key="kaptcha.textproducer.char.length">4</prop>
						<prop key="kaptcha.textproducer.font.names">微软雅黑,Arial</prop>
						<prop key="kaptcha.textproducer.char.space">3</prop>
						<!-- <prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop> -->
						<prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.WaterRipple</prop>
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>
	
	<!-- 基于浏览器的国际化 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">             
	    <property name="basenames"> 
	        <list>
	        	<value>classpath:i18n/common</value>
	        	<value>classpath:i18n/pageinfo</value>
	        	<value>classpath:i18n/upload</value>
	        </list>
		</property>            
	    <property name="useCodeAsDefaultMessage" value="true" />           
	</bean>
	
	<!-- @Component -->
	<context:component-scan base-package="com.springmvc.*"></context:component-scan>
	
	<!-- support JSR303 annotation if JSR 303 validation present on classpath -->
  	<mvc:annotation-driven />
  	
  	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
        <property name="typeAliasesPackage" value="com.springmvc.model.po"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
    </bean>
    
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.springmvc.mapper" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>
    
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.springmvc.mapper"/>
        <!-- 3.2.2版本新特性，markerInterface可以起到mappers配置的作用，详细情况需要看Marker接口类 -->
        <!-- <property name="markerInterface" value="com.paul.util.MyMapper"/> -->
        <!-- 通用Mapper通过属性注入进行配置，默认不配置时会注册Mapper<T>接口 -->
        <property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper
            </value>
        </property>
    </bean>

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>
  	
  	<bean id="strongEncryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
	    <property name="algorithm" value="PBEWithMD5AndTripleDES" />
        <property name="password" value="BYTEZ0N" />
	</bean>
	
	<!-- 要在所有bean加载完成后，才设置spring context holder -->
	<bean id="springContextHolder" class="com.springmvc.util.SpringContextHolder" />  
	
	<!-- dev,production环境的profile，通过设置web.xml中的spring.profiles.active来激活其中一个 -->
	<beans profile="dev">
		<bean id="propertyConfigurer" class="org.jasypt.spring3.properties.EncryptablePropertyPlaceholderConfigurer">
	        <constructor-arg ref="strongEncryptor" />
	        <property name="locations">
	            <list>
	                <value>classpath:account-dev.properties</value>
	                <value>classpath:settings-dev.properties</value>
	            </list>
	        </property>
	    </bean>
	</beans>
	<beans profile="prod">
		<bean id="propertyConfigurer" class="org.jasypt.spring3.properties.EncryptablePropertyPlaceholderConfigurer">
	        <constructor-arg ref="strongEncryptor" />
	        <property name="locations">
	            <list>
	                <value>classpath:account-prod.properties</value>
	                <value>classpath:settings-prod.properties</value>
	            </list>
	        </property>
	    </bean>
	</beans>
	
</beans>